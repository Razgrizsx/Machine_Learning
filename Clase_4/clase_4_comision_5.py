# -*- coding: utf-8 -*-
"""Clase_4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RVeG92hofXEtdwTWtlm7K4G4f6QI379E
"""

#Clase 4
import numpy as np

array = np.array([1, 2, 3, 4, 5, 6])
array2 = array.reshape((3, 2))
array3 = np.resize(array, (3, 2))
print(array2)
print(array3)

#Vector en python puro
vector_py = [1, 2, 3, 4, 5]
vector_py2 = [6, 7, 8, 9, 10]
#Vector en numpy
np1 = np.array(vector_py) #conversion a vector numpy
vector_npy = np.array([1, 2, 3, 4, 5])
vector_npy2 = np.array([6, 7, 8, 9, 10])
print(vector_npy)

#Operacion Python puro
#Suma
suma_puro = [x + 2 for x in vector_py]
suma_vector_puro = [vector_py[i] + vector_py2[i] for i in range(len(vector_py))]
#Resta
resta_puro = [x - 2 for x in vector_py]
resta_vector_puro = [vector_py[i] - vector_py2[i] for i in range(len(vector_py))]

print(resta_vector_puro)

#Operacion en numpy
suma_numpy = vector_npy + vector_npy2
print(f"Suma_numpy: {suma_numpy}")

#Vectores a matrices 2D
vector_npy3 = np.array([11, 12, 13, 14, 15])

matrix = np.array([vector_npy, vector_npy2, vector_npy3])

print(matrix)

#Matrices 2D
#Recorrer
elemento = 5
posiciones = np.where(matrix == elemento)

fila, columna = posiciones  #[0] y [1]
print(posiciones[1])

if len(fila)>0:
  fila = fila[0]
  columna = columna[0]
  print(f"El elemento {elemento}, se encuentra en la fila {fila} y columna {columna}")
else:
  print("No se encontro el elemento")